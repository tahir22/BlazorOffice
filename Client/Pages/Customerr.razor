@page "/Customerr"
@using Test.Shared
@inject HttpClient Http
@*<h3>Customerr</h3>*@
@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager;

@using Syncfusion.Blazor.Grids

<div class="col-lg-4 control-section">
    <SfToast @ref="ToastObj" ID="toast_type">
        <ToastPosition X="right" Y="top"></ToastPosition>
    </SfToast>
</div>
@if (AccidentsList == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <SfGrid DataSource="@Orders" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })" Height="315">
        <GridEvents OnActionBegin="OnBeginHandler" TValue="CustomerModel"></GridEvents>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridColumns>
            <GridColumn Field=@nameof(CustomerModel.Name) HeaderText="Name" TextAlign="TextAlign.Center" Width="120"></GridColumn>
            <GridColumn Field=@nameof(CustomerModel.Email) HeaderText="Email" TextAlign="TextAlign.Center" Width="120"></GridColumn>
            <GridColumn Field=@nameof(CustomerModel.Cnic) HeaderText="Cnic" TextAlign="TextAlign.Center" Width="120"></GridColumn>
            <GridColumn Field=@nameof(CustomerModel.MobileNo) HeaderText="MobileNo" TextAlign="TextAlign.Center" Width="120"></GridColumn>
        </GridColumns>
    </SfGrid>













    @*<div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <div id="container">
                        <SfGrid ID="DailyGrid" @ref="DailyGrid" DataSource="@AccidentsList"
                                AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true"
                                Height="600" RowHeight="38"
                                Toolbar=@ToolbarItems
                                AllowExcelExport="true" AllowPdfExport="true">
                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
                            <GridPageSettings PageCount="5" PageSize="20" PageSizes="new int[]{ 5, 10, 20, 50, 100 }"></GridPageSettings>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                            <GridEvents OnToolbarClick="DailyToolbarClick" TValue="CustomerModel"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(CustomerModel.Name) TextAlign="TextAlign.Center" HeaderText="Name" Width="130"></GridColumn>
                                <GridColumn Field=@nameof(CustomerModel.Email) HeaderText="Email" Width="130"></GridColumn>
                                <GridColumn Field=@nameof(CustomerModel.Cnic) HeaderText="Cnic" Width="130"></GridColumn>
                                <GridColumn Field=@nameof(CustomerModel.MobileNo) HeaderText="MobileNo" Width="130"></GridColumn>


                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>*@


    /////////////////////////////////////////

    @*<table class="table table-bordered border-primary table-responsive-sm">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Mobile No</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in AccidentsList)
                {
                    <tr>
                        <td>@forecast.Id         </td>
                        <td>@forecast.Name       </td>
                        <td>@forecast.Email     </td>
                        <td>@forecast.MobileNo  </td>
                    </tr>
                }
            </tbody>
        </table>*@







    @*<div class="row">
        @foreach (var forecast in AccidentsList)
        {
        <div class="col-lg-3">
            <div class="card shadow" style="width: 18rem;">
                <ul class="list-group list-group-flush ">
                    <li class="list-group-item">@forecast.Id      </li>
                    <li class="list-group-item">@forecast.Name    </li>
                    <li class="list-group-item">@forecast.Email   </li>
                    <li class="list-group-item">@forecast.MobileNo</li>
                </ul>

            </div>
        </div>

                }

            </div>*@











}



@code {
    #region Toast
    SfToast ToastObj;
    string toastMessage;
    ToastModel Toast;
    #endregion

    private int UserToBeDeletedId;
    CustomerModel User = new CustomerModel();
    public List<CustomerModel> Orders { get; set; }
    private async Task OnBeginHandler(ActionEventArgs<CustomerModel> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Action == "Add")
            {

                User = Args.Data; //returns the edited / insrted record details.
                                  //insert into your db



                var result = await Http.PostAsJsonAsync("api/Values/AddCustomer", User);
                if (result.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    toastMessage = "Data save successfully";
                    Toast = new ToastModel { Title = "Congratulations ", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                    //Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                    await CallGetAllCustomer();
                    await this.ToastObj.Show(Toast);


                    //await JSRuntime.InvokeVoidAsync("toastfun");

                    User = new CustomerModel();

                }
                else
                {

                    toastMessage = "Data not save successfully";
                    Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                    await this.ToastObj.Show(Toast);
                }
            }
            else
            {


                var result = await Http.PostAsJsonAsync("api/Values/UpdateCustomerAsync", User);
                if (result.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    toastMessage = "Data Updated successfully";
                    Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                    await this.ToastObj.Show(Toast);
                }
                else
                {

                    toastMessage = "Data not Updated successfully";
                    Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                    await CallGetAllCustomer();
                    await this.ToastObj.Show(Toast);
                }
                //update data into your db
            }
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {


            //if (Args.Action == "Delete")
            //{



            int id = Args.Data.Id;
            apiRequest apiRequestt = new apiRequest() { Id = id };

            var result = await Http.PostAsJsonAsync("api/Values/DeleteUser", apiRequestt);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {

                toastMessage = "Data Delete successfully";
                Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await CallGetAllCustomer();
                await this.ToastObj.Show(Toast);

                // await Http.PostAsJsonAsync("api/Values/DeleteUser", id);
            }
            else
            {

                toastMessage = "Data not Delete successfully";
                Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.Show(Toast);
            }





        }
    }





    public string[] ToolbarItems = new string[] { "ExcelExport", "CsvExport", "PdfExport", "Search", "Add", "Edit", "Delete", "Update", "Cancel" };

    public IEditorSettings FreightEditParams = new NumericEditCellParams
    {
        Params = new NumericTextBoxModel<object>() { ShowClearButton = true, ShowSpinButton = false }
    };



    public List<CustomerModel> AccidentsList { get; set; }

    public List<CustomerModel> TreeData { get; set; }
    SfGrid<CustomerModel> DailyGrid;

    public async Task CallGetAllCustomer()
    {
        AccidentsList = (await Http.GetFromJsonAsync<List<CustomerModel>>("api/Values/GetAllCustomer")).OrderByDescending(x => x.Id).ToList();
        Orders = AccidentsList;

    }

    protected override async Task OnInitializedAsync()
    {
        await CallGetAllCustomer();
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        //TreeData = (await Http.GetFromJsonAsync<List<CustomerModel>>("api/Values/GetAllCustomer")).OrderByDescending(x => x.Id).ToList();

        //.OrderByDescending(x => x.LastUpdated)
    }
    public void DailyToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "DailyGrid_pdfexport")
        {
            PdfExportProperties Props = new PdfExportProperties();
            Props.PageOrientation = PageOrientation.Landscape;
            Props.PageSize = PdfPageSize.A4;
            this.DailyGrid.PdfExport(Props);
        }
        if (args.Item.Id == "DailyGrid_excelexport")
        {
            this.DailyGrid.ExcelExport();
        }
        if (args.Item.Id == "DailyGrid_csvexport")
        {
            this.DailyGrid.CsvExport();
        }
    }
}
