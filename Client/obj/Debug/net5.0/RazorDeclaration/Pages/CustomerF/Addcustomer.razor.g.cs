// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Test.Client.Pages.CustomerF
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Test.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Test.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.DocumentEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\BA Tech\source\repos\Test\Client\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\BA Tech\source\repos\Test\Client\Pages\CustomerF\Addcustomer.razor"
using Test.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Addcustomer")]
    public partial class Addcustomer : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 341 "C:\Users\BA Tech\source\repos\Test\Client\Pages\CustomerF\Addcustomer.razor"
       


    #region Toast
    SfToast ToastObj;
    string toastMessage;
    ToastModel Toast;
    #endregion









    string message { get; set; }

    private bool ConfirmDlgVisible { get; set; } = false;

    bool showAddUser = false;
    bool editUser = false;
    string content;
    private int UserToBeDeletedId;


    CustomerModel User = new CustomerModel();

    public List<CustomerinformationModel>
    ComplaintsList { get; set; }

    public List<SelectListItem>
        vehiclesList { get; set; } = new List<SelectListItem>
            ();

    public List<CustomerModel>
        AccidentsList { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>  ("WeatherForecast");
        AccidentsList = (await Http.GetFromJsonAsync<List<CustomerModel>>("api/Values/GetAllCustomer")).OrderByDescending(x => x.Id).ToList();
        DropdownListData();
        //.OrderByDescending(x => x.LastUpdated)
    }



    public async Task ListofCustomers()
    {
        AccidentsList = (await Http.GetFromJsonAsync<List<CustomerModel>>("api/Values/GetAllCustomer")).OrderByDescending(x => x.Id).ToList();
        ComplaintsList = (await Http.GetFromJsonAsync<List<CustomerinformationModel>>("api/Values/GetAllCustomer")).OrderBy(x => x.CusInfoId).ToList();
    }

    public async Task DropdownListData()
    {

        ComplaintsList = (await Http.GetFromJsonAsync<List<CustomerinformationModel>>("api/Values/DropdownListFill")).OrderBy(x => x.CusInfoId).ToList();

        // vehiclesList = ComplaintsList.GroupBy(x => x.VehicleNumber).Select(x => new SelectListItem() { Text = x.Key, Value = x.Key }).ToList();

        vehiclesList = ComplaintsList.Select(x => new SelectListItem() { Text = x.City, Value = x.CusInfoId.ToString() }).ToList();

    }




    public async Task AddUser()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Values/AddCustomer", User);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {


                //await JSRuntime.InvokeVoidAsync("toastfun");
                toastMessage = "Data save successfully";
                Toast = new ToastModel { Title = "Congratulations ", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                //Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.Show(Toast);



                await ListofCustomers();
                User = new CustomerModel();
                //refreshObjects();
                //UserList = await GetUsers();
                //showAddUserModal();
            }
            else
            {
                toastMessage = "Data not save successfully";
                Toast = new ToastModel { Title = "Error", Content = toastMessage, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                await this.ToastObj.Show(Toast);

            }
        }
        catch (Exception)
        {
            //this.message = "Data not2 save successfully";
            toastMessage = "Data not save successfully";
            Toast = new ToastModel { Title = "Error", Content = toastMessage, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
            await this.ToastObj.Show(Toast);
        }

    }
    public void EditDetails(CustomerModel user)
    {
        editUserModal();
        this.User = user;
    }

    async Task UpdateUser()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Values/UpdateCustomerAsync", User);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                //UserList.Clear();
                //refreshObjects();
                //editUserModal();
                //UserList = await GetUsers();
                //await ListofCustomers();
                //User = new CustomerModel();
                //this.message = "Data Updated successfully";
                toastMessage = "Data Updated successfully";
                Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.Show(Toast);
            }
        }
        catch (Exception)
        {
            //this.message = "Data not Updated successfully";
            toastMessage = "Data not Updated successfully";
            Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
            await this.ToastObj.Show(Toast);
        }
    }

    void cancelModal()
    {
        editUser = false;
        showAddUser = false;
        content = "Add User";
    }
    void editUserModal()
    {
        editUser = !editUser;
        showAddUserModal();
    }
    void showAddUserModal()
    {





        if (editUser)
        {
            content = "Edit User";
        }
        else
        {

            content = "Add User";
        }

        User = new CustomerModel();

        showAddUser = !showAddUser;

    }







    public void ConfirmBtn(int id, string name)
    {
        UserToBeDeletedId = id;
        content = "Are you sure you want to permanently delete \"" + name + "\" ?";

        this.ConfirmDlgVisible = true;
    }
    public void HideDialog(Object e)
    {
        this.ConfirmDlgVisible = false;
    }

    async Task DeleteUser()
    {
        try
        {
            int id = UserToBeDeletedId;
            apiRequest apiRequestt = new apiRequest() { Id = Convert.ToInt32( UserToBeDeletedId) };
            this.ConfirmDlgVisible = false;

            var result = await Http.PostAsJsonAsync("api/Values/DeleteUser", apiRequestt);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {

                toastMessage = "Data Delete successfully";
                Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.Show(Toast);
                // await Http.PostAsJsonAsync("api/Values/DeleteUser", id);
            }
            else
            {

                toastMessage = "Data not Delete successfully";
                Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.Show(Toast);
            }

        }
        catch (Exception ex)
        {
            toastMessage = "Data not Delete successfully";
            Toast = new ToastModel { Title = "New Menu Item", Content = toastMessage, CssClass = "e-toast-success", Icon = "e-success toast-icons" };
            await this.ToastObj.Show(Toast);
            throw;
        }
        User =  new CustomerModel();

        await ListofCustomers();
        //refreshObjects();
    }















#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
